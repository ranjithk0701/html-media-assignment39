1->

class MyCircularDeque {
public:
    int front = -1;
    int rear = -1;
    int curr = 0;
    int size;
    vector<int> a;
    MyCircularDeque(int k) {
        a.resize(k);
        size = k;
    }
    
    bool insertFront(int value) {
        if(isFull()) return false;
        if(front == -1 && rear == -1){
            front = rear = 0;
            a[front] = value;
        }
        else if(front == 0){
            front = size - 1;
            a[front] = value;
        }

        else{
            front = front - 1;
            a[front] = value;
        }
        curr++;
        return true;
    }
    
    bool insertLast(int value) {
        if(isFull()) return false;
        if(front == -1 && rear == -1){
            front = rear = 0;
            a[rear] = value;
        }
        else if(rear == size-1){
            rear = 0;
            a[rear] = value;
        }

        else{
            rear = rear + 1;
            a[rear] = value;
        }
        curr++;
        return true;
    }
    
    bool deleteFront() {
        if(isEmpty()) return false;
        if(front == size - 1) front = 0;
        else front = front + 1;
        curr--;
        return true;
    }
    
    bool deleteLast() {
        if(isEmpty()) return false;
        if(rear == 0) rear = size - 1;
        else rear = rear - 1;
        curr--;
        return true;
    }
    
    int getFront() {
        if(isEmpty()) return -1;
        return a[front];
    }
    
    int getRear() {
        if(isEmpty()) return -1;
        return a[rear];
    }
    
    bool isEmpty() {
        return (curr == 0);
    }
    
    bool isFull() {
        return (curr == size);
    }
};